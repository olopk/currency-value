{"version":3,"sources":["components/NavBar/NavBar.js","components/DataContainer/SingleDataItem.js","components/DataContainer/DataContainer.js","store/actions/actionTypes.js","components/Main.js","store/actions/currencies_fetching.js","App.js","serviceWorker.js","store/reducers/reducer.js","index.js"],"names":["useStyles","makeStyles","tabs","justifyContent","color","DisabledTabs","React","useState","value","setValue","classes","Paper","square","Tabs","indicatorColor","textColor","onChange","event","newValue","className","centered","Tab","label","icon","component","Link","to","root","display","flexDirection","width","marginTop","border","borderRadius","block","borderRight","alignItems","flex","SingleDataItem","props","name","code","rate","type","toggleFav","onClick","DataContainer","dispatch","useDispatch","currencies","favourites","currenciesDate","content","CircularProgress","style","length","map","curr","index","key","currency","mid","find","el","marginBottom","Button","variant","Main","useSelector","state","fetchData","console","log","useEffect","a","axios","get","then","data","rates","effectiveDate","date","catch","error","Container","fixed","path","render","App","Boolean","window","location","hostname","match","initialState","loading","reducer","action","newFavs","favExists","filter","push","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.49741918.chunk.js","sourcesContent":["import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport {Link} from 'react-router-dom';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport EuroIcon from '@material-ui/icons/Euro';\nimport {makeStyles} from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n    tabs: {\n        justifyContent: 'center',\n        color: 'black'\n    }\n})\n\nexport default function DisabledTabs() {\n  const [value, setValue] = React.useState(1);\n\n  const classes = useStyles();\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  }\n\n  return (\n    <Paper square>\n      <Tabs\n        value={value}\n        indicatorColor=\"primary\"\n        textColor=\"primary\"\n        onChange={handleChange}\n        className={classes.tabs}\n        centered\n      >\n        <Tab label=\"Waluty\" value={1} icon={<EuroIcon />} component={Link} to='/'/>\n        <Tab label=\"Ulubione\" value={2} icon={<FavoriteIcon/>} component={Link} to='/favourites'/> \n      </Tabs>\n    </Paper>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nconst useStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        // flex: '1',   \n        width: '70%',\n        marginTop: '0.2vh',\n        border: '2px solid black',\n        borderRadius: '5px'\n    },\n    block: {\n        borderRight: '1px solid black',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flex: '1',\n    },\n    icon: {\n        flex: '0.5',\n    }\n})\n\nconst SingleDataItem = (props) => {\n\n    const classes = useStyles();\n    const { name, color, code, rate, type, toggleFav} = props;\n\n    return(\n        <div className={classes.root}>\n            <div className={classes.block}><span>{name}</span></div>\n            <div className={classes.block}><span>{code}</span></div>\n            <div className={classes.block}><span>{rate}</span></div>\n            <FavoriteIcon \n                color={type === 'favourites' ? 'secondary' : color}\n                className={classes.icon}\n                onClick={toggleFav}/>\n        </div>\n    )\n}\n\nexport default SingleDataItem;\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport SingleDataItem from './SingleDataItem';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {useDispatch} from 'react-redux';\nimport {TOGGLE_FAVOURITE, REMOVE_ALL_FAVOURITES} from '../../store/actions/actionTypes';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column',\n        marginTop: '4vh'\n    },\n    icon: {\n        marginTop: '5vh'\n    }\n})\n\nconst DataContainer = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const {currencies, type, favourites, currenciesDate} = props;\n\n    let content = <CircularProgress className={classes.icon}/>;\n\n    if(type === 'favourites'){\n        content = <span style={{marginTop: '10vh'}}>Nie masz wybranych żadnych ulubionych walut.</span>\n    }\n\n    if(currencies.length !== 0){\n        content = currencies.map((curr, index) => {\n            return (\n                <SingleDataItem \n                    key={index} \n                    name={curr.currency} \n                    code={curr.code} \n                    rate={curr.mid}\n                    color={favourites && favourites.find(el => el.code === curr.code) ? 'secondary' : 'primary'}\n                    type={type}\n                    toggleFav={()=>dispatch({type: TOGGLE_FAVOURITE, currency: curr})}\n                     />\n            )\n        })\n    }\n\n    return(\n        <div className={classes.root}>\n            {currenciesDate ? <span style={{marginBottom: '2vh'}}>Dane aktualne na dzień: {currenciesDate}</span> : null}\n            <SingleDataItem name='Nazwa' code='Kod' rate='Wartość' />\n            {content}\n            {type === 'favourites' && currencies.length !== 0 \n                ? <Button \n                     variant=\"contained\"\n                     color=\"secondary\"\n                     style={{marginTop: '5vh'}}\n                     onClick={()=>dispatch({type: REMOVE_ALL_FAVOURITES})}\n                     >Usuń wszystko</Button>\n                : null\n            }\n        </div>\n    )\n}\n\nexport default DataContainer;\n\n","export const FETCH_CURRENCIES_START = 'FETCH_CURRENCIES_START';\nexport const FETCH_CURRENCIES_SUCCESS = 'FETCH_CURRENCIES_SUCCESS';\nexport const FETCH_CURRENCIES_FAIL = 'FETCH_CURRENCIES_FAIL';\n\nexport const TOGGLE_FAVOURITE = 'TOGGLE_FAVOURITE';\nexport const REMOVE_ALL_FAVOURITES = 'REMOVE_ALL_FAVOURITES';\n","import React, {useEffect} from 'react';\nimport Container from '@material-ui/core/Container';\nimport { BrowserRouter, Route, Switch} from 'react-router-dom';\nimport NavBar from './NavBar/NavBar';\nimport DataContainer from './DataContainer/DataContainer';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {fetchCurrencies} from '../store/actions/currencies_fetching';\n\nexport default function Main() {\n\n  const currencies = useSelector(state => state.currencies)\n  const currenciesDate = useSelector(state => state.currenciesDate)\n  const favourites = useSelector(state => state.favourites)\n  const fetchData = useDispatch()\n\n  console.log(currenciesDate)\n\n  useEffect(()=>{\n  if(currencies.length === 0){\n       fetchData(fetchCurrencies())\n    }\n  },[currencies, fetchData])\n\n  return (\n    <BrowserRouter>\n      <Container fixed>\n          <NavBar/>\n          <Switch>\n              <Route path='/favourites' render={()=>(\n                <DataContainer\n                    type='favourites'\n                    currencies={favourites}\n                    currenciesDate={currenciesDate}\n                />\n                )}/>\n              <Route path='/' render={()=>(\n                  <DataContainer\n                     type='currencies'\n                     currencies={currencies}\n                     favourites={favourites}\n                     currenciesDate={currenciesDate}\n                  />\n              )}/>\n          </Switch>\n\n      </Container>\n    </BrowserRouter>\n  );\n}","import * as actionTypes from '../actions/actionTypes';\nimport axios from 'axios';\n\nexport const fetchCurrencies = () => {\n    return async dispatch => {\n\n        dispatch({type: actionTypes.FETCH_CURRENCIES_START});\n\n        await axios.get('https://api.nbp.pl/api/exchangerates/tables/a/')\n        .then(data => {\n            const {rates, effectiveDate} = data.data[0];\n            dispatch({\n                type: actionTypes.FETCH_CURRENCIES_SUCCESS,\n                currencies: rates,\n                date: effectiveDate\n            });\n        })\n        .catch(error => {\n            dispatch({type: actionTypes.FETCH_CURRENCIES_FAIL, error: error});\n        })\n    }\n}","import React from 'react';\nimport Main from './components/Main';\n\nfunction App() {\n  return <Main />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    currencies: [],\n    currenciesDate: null,\n    favourites: [],\n    loading: false,\n    error: null\n}\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type){\n        case actionTypes.FETCH_CURRENCIES_START:\n            return{\n                ...state,\n                loading: true,\n                error: null\n            }\n        case actionTypes.FETCH_CURRENCIES_SUCCESS:\n            return{\n                ...state,\n                currencies: action.currencies,\n                currenciesDate: action.date,\n                loading: false,\n                error: null\n            }\n        case actionTypes.FETCH_CURRENCIES_FAIL:\n            return{\n                ...state,\n                loading: false,\n                currenciesDate: null,\n                error: action.error\n            }\n        case actionTypes.TOGGLE_FAVOURITE:\n            let newFavs = [...state.favourites];\n            const favExists = state.favourites.find(el => el === action.currency);\n            if(favExists){\n                newFavs = newFavs.filter(el => el !== action.currency)\n            }else{\n                newFavs.push(action.currency)\n            }\n            return{\n                ...state,\n                favourites: newFavs\n            }\n        case actionTypes.REMOVE_ALL_FAVOURITES:\n            return{\n                ...state,\n                favourites: []\n            }\n        default: return state\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducer from './store/reducers/reducer';\nimport { Provider } from 'react-redux';\nimport { compose, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n  shouldHotReload: false\n}) : null || compose;\n\nconst store = createStore(reducer, composeEnhancers(\n  applyMiddleware(thunk)\n));\n\n// const store = createStore(reducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}